import ccxt
import pandas as pd
import ta  # Import ta library
import asyncio

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client for Futures Testnet
exchange = ccxt.binance({
    'apiKey': '7cd27ce6b7dfb9f453e87aaf006f2158d7ad142314ed746659a5a1cd788f5ad8',
    'secret': '3326cb1c97da66a451128e8745c7dcba74edfb2499a6f6424021cb7f322b03a1',
    'options': {
        'defaultType': 'future'  # ←------------- defaultType inside options
    },
    'enableRateLimit': True,  # required by the Manual
})

exchange.set_sandbox_mode(True)  # ←-------------- add this to switch to the sandbox/testnet

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=500):
    ohlcv = exchange.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to convert 5-minute candles to Renko bricks using 2% brick size
def convert_to_renko(df, brick_size_percent=1):
    if len(df) < 3:
        return pd.DataFrame()  # Not enough data

    ref_close = df['Close'].iloc[-1]  # Use the close price of the 5-minute candle [-2]
    brick_size = ref_close * (brick_size_percent / 100)  # 2% of [-2] close price
    renko_data = []
    last_brick_close = ref_close  # Start from this reference close price

    for i in range(1, len(df)):
        close = df['Close'].iloc[i]
        diff = close - last_brick_close

        if abs(diff) >= brick_size:
            num_bricks = int(abs(diff) // brick_size)
            direction = 1 if diff > 0 else -1

            for _ in range(num_bricks):
                new_brick_close = last_brick_close + (direction * brick_size)
                renko_data.append({
                    'Open': last_brick_close,
                    'High': max(last_brick_close, new_brick_close),
                    'Low': min(last_brick_close, new_brick_close),
                    'Close': new_brick_close
                })
                last_brick_close = new_brick_close

    renko_df = pd.DataFrame(renko_data)
    if not renko_df.empty:
        renko_df.index = pd.date_range(start=df.index[0], periods=len(renko_df), freq='min')

    return renko_df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to calculate quantity for $10 USD worth of the asset
def calculate_quantity(symbol, price):
    try:
        # Fetch the minimum quantity precision for the symbol
        markets = exchange.load_markets()
        market = markets[symbol]
        precision = market['precision']['amount']
        
        # Calculate quantity for $10 USD
        quantity = 100 / price
        quantity = round(quantity, precision)  # Round to the required precision
        return quantity
    except Exception as e:
        print(f"Error calculating quantity for {symbol}: {e}")
        return None

# Function to place order on Binance Futures Testnet
async def place_order(symbol, side, price):
    try:
        # Calculate quantity for $10 USD
        quantity = calculate_quantity(symbol, price)
        if quantity is None:
            print(f"Failed to calculate quantity for {symbol}")
            return

        # Place the order
        order = exchange.create_order(
            symbol=symbol,
            type='market',
            side=side,
            amount=quantity,
            price=price,
            params={'test': True}  # Test mode for Binance Futures Testnet
        )
        print(f"Order placed: {order}")
    except Exception as e:
        print(f"Error placing order: {e}")

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)

                # Convert to Renko bricks
                renko_df = convert_to_renko(historical_data, brick_size_percent=1)
                if renko_df.empty:
                    continue  # Skip if no Renko bricks are generated

                # Calculate EMA
                renko_df['ema_short'] = calculate_ema(renko_df, 4)
                renko_df['ema_long'] = calculate_ema(renko_df, 10)

                # Check alert conditions
                crossover = (
                    renko_df['ema_short'].iloc[-2] > renko_df['ema_long'].iloc[-2] and
                    renko_df['ema_short'].iloc[-3] < renko_df['ema_long'].iloc[-3]
                )
                crossdown = (
                    renko_df['ema_short'].iloc[-2] < renko_df['ema_long'].iloc[-2] and
                    renko_df['ema_short'].iloc[-3] > renko_df['ema_long'].iloc[-3]
                )

                if crossover:
                    await place_order(symbol, 'buy', renko_df['Close'].iloc[-1])

                elif crossdown:
                    await place_order(symbol, 'sell', renko_df['Close'].iloc[-1])

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(300)  # Run every 5 minutes

asyncio.run(main())
