import requests
import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import config1  # Import the config module
import ta  # Import ta library

interval = '8h'  # Adjust to '4h' if you need 4-hour candlesticks

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    # Rename columns to match mplfinance format
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to calculate MACD histogram
def calculate_macd_histogram(df):
    macd = ta.trend.MACD(df['Close'])
    return macd.macd_diff()

# Function to check MACD and EMA conditions
def check_macd_ema_conditions(df, short_period=3):
    df['ema_short'] = calculate_ema(df, short_period)
    df['macd_histogram'] = calculate_macd_histogram(df)

    long_condition = (df['ema_short'].iloc[-2] > df['ema_short'].iloc[-3]) and \
                     (df['macd_histogram'].iloc[-2] > df['macd_histogram'].iloc[-3])
    short_condition = (df['ema_short'].iloc[-2] < df['ema_short'].iloc[-3]) and \
                      (df['macd_histogram'].iloc[-2] < df['macd_histogram'].iloc[-3])

    return long_condition, short_condition

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config1.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bybit",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_1,
        },
        {
            "secret": config1.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bybit",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        try:
            response = requests.post('https://3commas.io/trade_signal/trading_view', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                # Fetch historical data
                historical_data = get_historical_data(symbol, interval)

                # Check MACD and EMA conditions
                long_condition, short_condition = check_macd_ema_conditions(historical_data)
                close_price = historical_data['Close'].iloc[-1]
                timestamp = int(historical_data.index[-1].timestamp())

                # MACD and EMA conditions
                if long_condition:
                    await send_3commas_payload(symbol, 'enter_long', close_price, timestamp)
                elif short_condition:
                    await send_3commas_payload(symbol, 'enter_short', close_price, timestamp)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(900)  # Sleep duration as needed

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
