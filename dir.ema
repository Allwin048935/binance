import ccxt
import pandas as pd
import time
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols, time_interval

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',
    }
})

# Define EMA strategy parameters
short_ema_period = 5
long_ema_period = 10

# Track the last order type and positions
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 10

def fetch_ohlcv(symbol, timeframe, limit):
    """Fetch historical OHLCV data and calculate EMAs"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['short_ema'] = calculate_ema(df, short_ema_period)
        df['long_ema'] = calculate_ema(df, long_ema_period)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV for {symbol}: {e}")
        return None

def calculate_ema(df, period, column='close'):
    """Calculate Exponential Moving Average"""
    return df[column].ewm(span=period, adjust=False).mean()

def get_quantity_precision(symbol):
    """Get quantity precision for a symbol"""
    markets = exchange.load_markets()
    return markets[symbol]['precision']['amount']

def place_market_buy_order(symbol, quantity):
    """Place a market buy order with proper precision"""
    try:
        precision = get_quantity_precision(symbol)
        quantity = round(quantity, precision)
        order = exchange.create_market_buy_order(symbol=symbol, amount=quantity)
        print(f"Market Buy Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Buy Order for {symbol}: {e}")
        return None

def place_market_sell_order(symbol, quantity):
    """Place a market sell order with proper precision"""
    try:
        precision = get_quantity_precision(symbol)
        quantity = round(quantity, precision)
        order = exchange.create_market_sell_order(symbol=symbol, amount=quantity)
        print(f"Market Sell Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Sell Order for {symbol}: {e}")
        return None

def close_open_position(symbol):
    """Close any existing open position"""
    try:
        if open_orders[symbol]:
            position = exchange.fetch_position(symbol)
            if position['side'] == 'long' and float(position['positionAmt']) > 0:
                order = place_market_sell_order(symbol, abs(float(position['positionAmt'])))
                print(f"Closing long position for {symbol}: {order}")
            elif position['side'] == 'short' and float(position['positionAmt']) > 0:
                order = place_market_buy_order(symbol, abs(float(position['positionAmt'])))
                print(f"Closing short position for {symbol}: {order}")
            open_orders[symbol] = None
    except Exception as e:
        print(f"Error closing open position for {symbol}: {e}")

def close_open_orders(symbol):
    """Cancel any pending open orders"""
    try:
        if open_orders[symbol] and 'id' in open_orders[symbol]:
            exchange.cancel_order(open_orders[symbol]['id'], symbol=symbol)
            print(f"Cancelled open order for {symbol}: {open_orders[symbol]['id']}")
            open_orders[symbol] = None
    except Exception as e:
        print(f"Error cancelling open order for {symbol}: {e}")

def ema_strategy():
    """Main trading strategy loop"""
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data
                historical_data = fetch_ohlcv(symbol, time_interval, 100)
                if historical_data is None or len(historical_data) < long_ema_period + 1:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Get latest price
                latest_candle = exchange.fetch_ticker(symbol)
                if 'close' not in latest_candle or not latest_candle['close']:
                    print(f"Error: Invalid price data for {symbol}")
                    continue

                latest_close = float(latest_candle['close'])
                if latest_close <= 0:
                    print(f"Error: Invalid price ({latest_close}) for {symbol}")
                    continue

                quantity = fixed_quantity_usdt / latest_close
                print(f"Symbol: {symbol}, Latest Close: {latest_close}, Quantity: {quantity}")

                # Check EMA crossover conditions using last two values
                short_ema_current = historical_data['short_ema'].iloc[-1]
                long_ema_current = historical_data['long_ema'].iloc[-1]
                short_ema_prev = historical_data['short_ema'].iloc[-2]
                long_ema_prev = historical_data['long_ema'].iloc[-2]

                # Buy condition: short EMA crosses above long EMA
                if (short_ema_current > long_ema_current and 
                    short_ema_prev <= long_ema_prev and 
                    last_order_types[symbol] != 'BUY'):
                    print(f'{symbol} Buy Signal (Crossover)')
                    close_open_position(symbol)
                    close_open_orders(symbol)
                    open_orders[symbol] = place_market_buy_order(symbol, quantity)
                    if open_orders[symbol]:
                        last_order_types[symbol] = 'BUY'

                # Sell condition: short EMA crosses below long EMA
                elif (short_ema_current < long_ema_current and 
                      short_ema_prev >= long_ema_prev and 
                      last_order_types[symbol] != 'SELL'):
                    print(f'{symbol} Sell Signal (Crossunder)')
                    close_open_position(symbol)
                    close_open_orders(symbol)
                    open_orders[symbol] = place_market_sell_order(symbol, quantity)
                    if open_orders[symbol]:
                        last_order_types[symbol] = 'SELL'

            time.sleep(300)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)

if __name__ == "__main__":
    print("Starting EMA trading strategy...")
    ema_strategy()
