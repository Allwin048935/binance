import ccxt
import pandas as pd
import asyncio
import requests
import config
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import Application, CommandHandler
from ta.trend import EMAIndicator

# Binance interval for candlesticks
interval = '4h'

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# List of selected symbols from Telegram
selected_symbols = []

# Automatically fetch USDT trading pairs from Binance
def fetch_usdt_pairs():
    url = "https://api.binance.com/api/v3/exchangeInfo"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        usdt_pairs = [
            s['symbol'] for s in data['symbols']
            if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
        ]
        return usdt_pairs
    except requests.exceptions.RequestException as e:
        print(f"Error fetching USDT pairs: {e}")
        return []

# Get the available USDT trading pairs
SELECTED_SYMBOLS = fetch_usdt_pairs()

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, short_window=3, long_window=7):
    short_ema = EMAIndicator(close=df['close'], window=short_window)
    long_ema = EMAIndicator(close=df['close'], window=long_window)
    df['short_ema'] = short_ema.ema_indicator()
    df['long_ema'] = long_ema.ema_indicator()
    return df

# Function to check EMA crossover
def check_ema_crossover(df):
    cross_over = df['short_ema'].iloc[-3] < df['long_ema'].iloc[-3] and df['short_ema'].iloc[-2] > df['long_ema'].iloc[-2]
    cross_under = df['short_ema'].iloc[-3] > df['long_ema'].iloc[-3] and df['short_ema'].iloc[-2] < df['long_ema'].iloc[-2]
    return cross_over, cross_under

# Function to send a message to Telegram and remove the symbol after alert
def send_telegram_message(symbol, action, close_price):
    message = f"/{action} {symbol}"
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN_EXIT}/sendMessage"
    params = {"chat_id": config.TELEGRAM_CHAT_ID, "text": message}

    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            print(f"Sent alert for {symbol} with action {action} to Telegram")
            last_alert_messages[symbol] = action
            
            # Remove the symbol from the selected_symbols list
            if symbol in selected_symbols:
                selected_symbols.remove(symbol)
                print(f"{symbol} removed from selected symbols list.")
        else:
            print(f"Failed to send Telegram alert for {symbol}: {response.content}")
    except requests.RequestException as e:
        print(f"Error sending Telegram request for {symbol}: {e}")

# Command to set symbols
async def set_symbols(update: Update, context) -> None:
    global selected_symbols
    user_symbols = context.args

    if user_symbols:
        valid_symbols = [symbol.upper() for symbol in user_symbols if symbol.upper() in SELECTED_SYMBOLS]
        invalid_symbols = [symbol.upper() for symbol in user_symbols if symbol.upper() not in SELECTED_SYMBOLS]

        new_symbols = [symbol for symbol in valid_symbols if symbol not in selected_symbols]
        selected_symbols.extend(new_symbols)

        response_message = ""
        if new_symbols:
            response_message += f"Symbols updated: {', '.join(selected_symbols)}\n"
        if invalid_symbols:
            response_message += f"Invalid symbols (not available): {', '.join(invalid_symbols)}"
        if not new_symbols and not invalid_symbols:
            response_message = "All provided symbols are already in the list."

        await update.message.reply_text(response_message)
    else:
        await update.message.reply_text("No symbols provided. Usage: /set_symbols BTCUSDT ETHUSDT")

# Command to reset symbols and last alert messages
async def reset_symbols(update: Update, context) -> None:
    global selected_symbols, last_alert_messages
    selected_symbols = []
    last_alert_messages.clear()
    await update.message.reply_text("Symbols and last alert messages have been reset.")

# Main trading function
async def main_trading():
    while True:
        for symbol in selected_symbols[:]:  # Use slicing to safely modify the list
            try:
                historical_data = get_historical_data(symbol, interval)
                historical_data = calculate_ema(historical_data)
                cross_over, cross_under = check_ema_crossover(historical_data)
                close_price = historical_data['close'].iloc[-1]

                if cross_over:
                    send_telegram_message(symbol, "exit_short", close_price)
                elif cross_under:
                    send_telegram_message(symbol, "exit_long", close_price)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(60)

# Start Telegram bot
async def start_telegram_bot():
    application = Application.builder().token(config.TELEGRAM_TOKEN_EXIT).build()

    application.add_handler(CommandHandler('set_symbols', set_symbols))
    application.add_handler(CommandHandler('reset_symbols', reset_symbols))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# Main function to run both bot and trading
async def main():
    await asyncio.gather(
        start_telegram_bot(),
        main_trading()
    )

# Run the main function
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())
