import aiohttp
import asyncio
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
from telegram import Bot
import config1
import ta
import os
import logging

# Constants
INTERVAL = '3m'
RENKO_CSV_FILE = "renko_bricks.csv"
ALERT_HISTORY_FILE = "alert_history.json"
INTERVAL_SECONDS = 30

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Fetch selected symbols dynamically from Binance
async def fetch_selected_symbols():
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                selected_symbols = [
                    s['symbol'] for s in data['symbols']
                    if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
                ]
                return selected_symbols
    except Exception as e:
        logger.error(f"Error fetching symbols: {e}")
        return []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Load Renko history from CSV
def load_renko_history():
    """Loads saved Renko bricks from CSV."""
    if not os.path.exists(RENKO_CSV_FILE):
        return {}
    try:
        df = pd.read_csv(RENKO_CSV_FILE)
        renko_history = {}
        for symbol in df['Symbol'].unique():
            renko_history[symbol] = df[df['Symbol'] == symbol][['Open', 'High', 'Low', 'Close']]
        return renko_history
    except Exception as e:
        logger.error(f"Error loading Renko history: {e}")
        return {}

# Calculate EMA from stored Renko close prices
def calculate_ema(renko_df, period):
    if renko_df is None or renko_df.empty:
        return pd.Series([], dtype='float64')
    if len(renko_df) < period:
        return pd.Series([None] * len(renko_df), index=renko_df.index)
    return ta.trend.EMAIndicator(renko_df['Close'], window=period).ema_indicator()

# Plot Renko Chart
def plot_renko_chart(symbol):
    renko_history = load_renko_history()
    if symbol not in renko_history:
        return None, None
    renko_df = renko_history[symbol]
    renko_df['ema_short'] = calculate_ema(renko_df, 2)
    renko_df['ema_long'] = calculate_ema(renko_df, 26)
    renko_plot_df = renko_df.iloc[-120:]  # Last 120 Renko bricks for plotting

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
    
    fig, ax = mpf.plot(
        renko_plot_df, figratio=(10, 6), type="candle", style=s, tight_layout=True,
        datetime_format='%H:%M', ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(renko_plot_df['ema_short'], color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(renko_plot_df['ema_long'], color='magenta', width=1.5, linestyle='-'),
        ], returnfig=True
    )
    
    ax[0].set_title(f"{symbol} - Renko Chart", fontsize=18)
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    
    return buf, renko_plot_df['Close'].iloc[-1]

# Main Trading Loop
async def main(tg_bot):
    selected_symbols = await fetch_selected_symbols()
    if not selected_symbols:
        logger.error("No symbols selected. Exiting.")
        return

    while True:
        for symbol in selected_symbols:
            try:
                image_buffer, close_price = plot_renko_chart(symbol)
                if image_buffer is None:
                    logger.info(f"No data available for {symbol}")
                    continue
                await tg_bot.send_photo(chat_id=config1.CHAT_ID, photo=image_buffer, caption=f"#{symbol} - Renko Chart")
                image_buffer.close()
            except Exception as e:
                logger.error(f"Error processing {symbol}: {e}")
        await asyncio.sleep(INTERVAL_SECONDS)

if __name__ == "__main__":
    # Validate configuration
    required_config_keys = ['API_KEY', 'API_SECRET', 'TELEGRAM_TOKEN', 'CHAT_ID']
    for key in required_config_keys:
        if not hasattr(config1, key):
            raise ValueError(f"Missing required configuration key: {key}")

    # Initialize Telegram bot
    tg_bot = Bot(token=config1.TELEGRAM_TOKEN)

    # Run the main loop
    try:
        asyncio.run(main(tg_bot))
    except KeyboardInterrupt:
        logger.info("Bot stopped by user.")
