import requests
import ccxt
import pandas as pd
import config1
import telegram
import os
from datetime import datetime

# Fetch SELECTED_SYMBOLS from Binance Futures
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [s['symbol'] for s in data['symbols'] if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING']
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance Futures: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
    'timeout': 30000,
    'enableRateLimit': True,
})

# Initialize Telegram bot
bot = telegram.Bot(token=config1.TELEGRAM_BOT_TOKEN)

# Function to get historical data
def get_historical_data(symbol, interval, limit):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to process symbol and track trades
def process_symbol(symbol):
    try:
        # Get weekly data (1 candle)
        df_weekly = get_historical_data(symbol, '1w', 1)
        # Get 5m data for backtesting (1 week = 7 days * 24 hours * 12 candles/hour = 2016 candles)
        df_5m = get_historical_data(symbol, '5m', 2016)
        
        if df_weekly.empty or df_5m.empty or len(df_5m) < 1000:
            return symbol, None, None, None, None, None
        
        week_open = df_weekly['Open'].iloc[-1]
        current_5m_close = df_5m['Close'].iloc[-1]
        
        # Determine position
        percent_change = ((current_5m_close - week_open) / week_open) * 100
        position = "Long" if current_5m_close > week_open else "Short"
        
        # Backtest simulation for full week without TP/SL
        trades = []
        max_profit = 0
        entry_price = None
        trade_start_idx = 0
        
        for i in range(len(df_5m)):
            current_price = df_5m['Close'].iloc[i]
            current_position = "Long" if current_price > week_open else "Short"
            
            # If no trade is open, start one
            if entry_price is None:
                entry_price = current_price
                trade_start_idx = i
                continue
            
            # If position changes, close previous trade and start new one
            if (position == "Long" and current_price < week_open) or \
               (position == "Short" and current_price > week_open):
                if position == "Long":
                    profit = ((current_price - entry_price) / entry_price) * 100
                else:  # Short
                    profit = ((entry_price - current_price) / entry_price) * 100
                
                trades.append({
                    'entry': entry_price,
                    'exit': current_price,
                    'profit': profit
                })
                entry_price = current_price
                trade_start_idx = i
                continue
            
            # Track max profit for current trade
            if position == "Long":
                current_profit = ((current_price - entry_price) / entry_price) * 100
            else:  # Short
                current_profit = ((entry_price - current_price) / entry_price) * 100
            max_profit = max(max_profit, current_profit)
        
        # Close any open trade at the end
        if entry_price is not None:
            last_price = df_5m['Close'].iloc[-1]
            if position == "Long":
                profit = ((last_price - entry_price) / entry_price) * 100
            else:  # Short
                profit = ((entry_price - last_price) / entry_price) * 100
            trades.append({
                'entry': entry_price,
                'exit': last_price,
                'profit': profit
            })
        
        total_trades = len(trades)
        cumulative_profit = sum(trade['profit'] for trade in trades) if trades else 0
        
        return symbol, percent_change, position, max_profit, total_trades, cumulative_profit
    
    except Exception as e:
        print(f"Error processing {symbol}: {e}")
        return symbol, None, None, None, None, None

# Function to save and send results
async def save_and_send_results(long_positions, short_positions, long_cumulative, short_cumulative):
    long_df = pd.DataFrame(long_positions, columns=['Symbol', 'Change %', 'Max Profit %', 'Trades', 'Cumulative Profit %'])
    short_df = pd.DataFrame(short_positions, columns=['Symbol', 'Change %', 'Max Profit %', 'Trades', 'Cumulative Profit %'])
    
    filename = 'trading_positions.xlsx'
    with pd.ExcelWriter(filename) as writer:
        long_df.to_excel(writer, sheet_name='Long Positions', index=False)
        short_df.to_excel(writer, sheet_name='Short Positions', index=False)
        summary_df = pd.DataFrame({
            'Metric': ['Cumulative Long %', 'Cumulative Short %'],
            'Value': [f"{long_cumulative:.2f}%", f"{short_cumulative:.2f}%"]
        })
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
    
    with open(filename, 'rb') as file:
        await bot.send_document(
            chat_id=config1.TELEGRAM_CHAT_ID,
            document=file,
            caption=f"Trading Positions - {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    
    os.remove(filename)

# Main function
async def main():
    long_positions = []
    short_positions = []
    
    print("Processing symbols...")
    for symbol in SELECTED_SYMBOLS:
        sym, percent, position, max_profit, trades, cum_profit = process_symbol(symbol)
        if percent is not None:
            if position == "Long":
                long_positions.append((sym, percent, max_profit, trades, cum_profit))
            elif position == "Short":
                short_positions.append((sym, percent, max_profit, trades, cum_profit))
    
    # Calculate cumulative percentages
    long_cumulative = sum(percent for _, percent, _, _, _ in long_positions)
    short_cumulative = sum(percent for _, percent, _, _, _ in short_positions)
    
    # Sort results
    long_positions.sort(key=lambda x: x[1], reverse=True)
    short_positions.sort(key=lambda x: x[1], reverse=True)
    
    # Print results
    print("\nLong Positions:")
    print("Symbol | Change % | Max Profit % | Trades | Cumulative Profit %")
    print("-" * 60)
    for symbol, percent, max_p, trades, cum_p in long_positions:
        print(f"{symbol:<12} | {percent:>6.2f}% | {max_p:>8.2f}% | {trades:>6} | {cum_p:>8.2f}%")
    print(f"\nCumulative Long Positions Percentage: {long_cumulative:.2f}%")
    
    print("\nShort Positions:")
    print("Symbol | Change % | Max Profit % | Trades | Cumulative Profit %")
    print("-" * 60)
    for symbol, percent, max_p, trades, cum_p in short_positions:
        print(f"{symbol:<12} | {percent:>6.2f}% | {max_p:>8.2f}% | {trades:>6} | {cum_p:>8.2f}%")
    print(f"\nCumulative Short Positions Percentage: {short_cumulative:.2f}%")
    
    await save_and_send_results(long_positions, short_positions, long_cumulative, short_cumulative)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())