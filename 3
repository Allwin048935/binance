import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config
import ta
from datetime import datetime

interval = '5m'  # 5-minute candlesticks
BRICK_SIZE_PERCENT = 1.0  # Define brick size percentage
PIVOT_BRICK_PERCENT = BRICK_SIZE_PERCENT * 3  # Pivot brick size set to 3x brick size

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

last_alert_messages = {}  # Store last alerts for each symbol
renko_cache = {}  # Store renko bricks to prevent repainting

def get_historical_data(symbol, interval, limit=1000):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

def convert_to_renko(df, symbol, brick_size_percent=BRICK_SIZE_PERCENT, pivot_brick_percent=PIVOT_BRICK_PERCENT):
    if len(df) < 3:
        return pd.DataFrame()

    renko_data = renko_cache.get(symbol, [])
    if not renko_data:
        last_brick_close = df['Close'].iloc[0]
        direction = 1
    else:
        last_brick_close = renko_data[-1]['Close']
        direction = renko_data[-1]['Direction']

    for i in range(1, len(df)):
        close = df['Close'].iloc[i]
        diff = close - last_brick_close

        if abs(diff) >= pivot_brick_percent / 100 * last_brick_close:
            new_brick_close = last_brick_close + (pivot_brick_percent / 100 * last_brick_close if diff > 0 else -pivot_brick_percent / 100 * last_brick_close)
            renko_data.append({'Open': last_brick_close, 'High': max(last_brick_close, new_brick_close), 'Low': min(last_brick_close, new_brick_close), 'Close': new_brick_close, 'Direction': 1 if diff > 0 else -1})
            last_brick_close = new_brick_close
            direction = 1 if diff > 0 else -1

        elif abs(diff) >= brick_size_percent / 100 * last_brick_close:
            new_brick_close = last_brick_close + (direction * brick_size_percent / 100 * last_brick_close)
            renko_data.append({'Open': last_brick_close, 'High': max(last_brick_close, new_brick_close), 'Low': min(last_brick_close, new_brick_close), 'Close': new_brick_close, 'Direction': direction})
            last_brick_close = new_brick_close

    renko_cache[symbol] = renko_data
    renko_df = pd.DataFrame(renko_data)
    if not renko_df.empty:
        renko_df.index = pd.date_range(start=df.index[0], periods=len(renko_df), freq='min')

    return renko_df

def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

def calculate_macd_histogram(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()

def plot_renko_with_ema_and_histogram(df, symbol, title):
    renko_df = convert_to_renko(df, symbol)
    if renko_df.empty:
        return None

    renko_df['ema_short'] = calculate_ema(renko_df, 4)
    renko_df['ema_long'] = calculate_ema(renko_df, 14)
    calculate_macd_histogram(renko_df)

    macd_colors = ['green' if renko_df['histogram'].iloc[i] > renko_df['histogram'].iloc[i - 1] else 'red' for i in range(1, len(renko_df['histogram']))]
    macd_colors.insert(0, 'gray')

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    fig, axlist = mpf.plot(
        renko_df, figratio=(10, 6), type="candle", style=s, tight_layout=True,
        datetime_format='%H:%M', ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(renko_df['ema_short'], color='cyan', width=1.5),
            mpf.make_addplot(renko_df['ema_long'], color='magenta', width=1.5),
            mpf.make_addplot(renko_df['histogram'], type='bar', color=macd_colors, panel=1, ylabel="MACD Histogram")
        ], returnfig=True
    )

    ax = axlist[0]
    ax.set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    return buf

async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                renko_df = convert_to_renko(historical_data, symbol)
                if renko_df.empty:
                    continue

                renko_df['ema_short'] = calculate_ema(renko_df, 4)
                renko_df['ema_long'] = calculate_ema(renko_df, 14)
                calculate_macd_histogram(renko_df)

                crossover = renko_df['histogram'].iloc[-2] > renko_df['histogram'].iloc[-3] and renko_df['histogram'].iloc[-3] < renko_df['histogram'].iloc[-4]
                crossdown = renko_df['histogram'].iloc[-2] < renko_df['histogram'].iloc[-3] and renko_df['histogram'].iloc[-3] > renko_df['histogram'].iloc[-4]

                if crossover or crossdown:
                    action = "enter_long" if crossover else "enter_short"
                    message = f"{symbol} - {'Crossover' if crossover else 'Crossdown'}"
                    image_buffer = plot_renko_with_ema_and_histogram(historical_data, symbol, message)

                    if last_alert_messages.get(symbol) != message:
                        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
                        if image_buffer:
                            await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
                        last_alert_messages[symbol] = message

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(300)

telegram_bot = Bot(token=config.TELEGRAM_TOKEN)
nest_asyncio.apply()
asyncio.run(main())