import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config
import ta
import json
import requests

interval = '5m'  # Candlestick interval

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Load previous Renko close prices from a JSON file
renko_history_file = "renko_history.json"
try:
    with open(renko_history_file, "r") as f:
        renko_history = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    renko_history = {}

# Fetch symbols dynamically from Binance Futures
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [s['symbol'] for s in data['symbols'] if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING']
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance Futures: {e}")
    SELECTED_SYMBOLS = []

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=1500):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    
    if not ohlcv:
        print(f"Error: No data returned for {symbol}")
        return None
    
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    # Debugging: Print column names before renaming
    print(f"Before renaming: {df.columns.tolist()}")

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    # Ensure column names are correctly formatted for mplfinance
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']

    # Debugging: Print column names after renaming
    print(f"After renaming: {df.columns.tolist()}")

    return df

# Function to create and update Renko data
def update_renko_data(df, symbol, percentage=1):
    if df is None or df.empty:
        return None
    
    brick_size = percentage / 100
    last_renko_close = renko_history.get(symbol, None)
    renko_data = []

    for index, row in df.iterrows():
        close = row['Close']
        if last_renko_close is None:
            renko_data.append({'timestamp': index, 'Close': close})
            last_renko_close = close
        else:
            while abs(close - last_renko_close) / last_renko_close >= brick_size:
                direction = 1 if close > last_renko_close else -1
                last_renko_close += direction * last_renko_close * brick_size
                renko_data.append({'timestamp': index, 'Close': last_renko_close})

    if len(renko_data) > 1:
        renko_history[symbol] = renko_data[-2]['Close']

    renko_df = pd.DataFrame(renko_data)

    if len(renko_df) < 2:
        return None
    
    renko_df.set_index('timestamp', inplace=True)
    return renko_df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to check EMA cross
def check_ema_cross(df, short_period=9, long_period=26):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    cross_over = df['ema_short'].iloc[-2] > df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] <= df['ema_long'].iloc[-3]
    cross_under = df['ema_short'].iloc[-2] < df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] >= df['ema_long'].iloc[-3]

    return cross_over, cross_under

# Function to plot Renko candles with EMA lines
def plot_renko_candles(df, symbol, title):
    if df is None or df.empty:
        print(f"Skipping {symbol} - Not enough Renko data to plot.")
        return None

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    short_ema = calculate_ema(df, 9)
    long_ema = calculate_ema(df, 26)

    fig, axlist = mpf.plot(
        df,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
        ],
        returnfig=True
    )

    axlist[0].set_title(f"{symbol} - {title}", fontsize=20, style='italic')

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)

    plt.close(fig)
    return buf

# Function to send Telegram message
async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        if image_buffer:
            await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

# Main function
async def main():
    global telegram_bot
    telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                
                if historical_data is None:
                    continue

                renko_data = update_renko_data(historical_data, symbol, percentage=1)

                if renko_data is None:
                    continue

                ema_cross_over, ema_cross_under = check_ema_cross(renko_data)

                if ema_cross_over:
                    message = f'/enter_long {symbol}'
                    title = f'EMA Cross Over for {symbol}'
                    image_buffer = plot_renko_candles(renko_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif ema_cross_under:
                    message = f'/enter_short {symbol}'
                    title = f'EMA Cross Under for {symbol}'
                    image_buffer = plot_renko_candles(renko_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        with open(renko_history_file, "w") as f:
            json.dump(renko_history, f)

        await asyncio.sleep(300)

nest_asyncio.apply()
asyncio.run(main())
