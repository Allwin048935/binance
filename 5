import ccxt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import requests
from scipy.signal import argrelextrema
from scipy.stats import linregress

# ‚úÖ 1Ô∏è‚É£ Fetch Data from Binance
exchange = ccxt.binance()
symbol = 'BTC/USDT'
timeframe = '4h'
limit = 500

ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

# ‚úÖ 2Ô∏è‚É£ Identify Pivot Highs and Lows (Similar to Pine Script)
lookback = 4  # Similar to input_pLen in Pine Script

df['pivot_high'] = np.nan
df['pivot_low'] = np.nan

high_idxs = argrelextrema(df['close'].values, np.greater, order=lookback)[0]
low_idxs = argrelextrema(df['close'].values, np.less, order=lookback)[0]

df.loc[high_idxs, 'pivot_high'] = df['close'].iloc[high_idxs]
df.loc[low_idxs, 'pivot_low'] = df['close'].iloc[low_idxs]

# ‚úÖ 3Ô∏è‚É£ Store Trendlines & Update on New Pivots
trendlines = []

def add_trendline(x_vals, y_vals, trend_type):
    """Adds a new trendline when a new pivot is detected."""
    if len(x_vals) < 2:
        return None
    slope, intercept, _, _, _ = linregress(x_vals, y_vals)
    trendlines.append({'x': x_vals, 'y': slope * x_vals + intercept, 'type': trend_type})

# Update trendlines dynamically
pivot_highs = df.dropna(subset=['pivot_high'])
pivot_lows = df.dropna(subset=['pivot_low'])

if len(pivot_highs) > 1:
    add_trendline(pivot_highs.index.values[-2:], pivot_highs['pivot_high'].values[-2:], 'resistance')

if len(pivot_lows) > 1:
    add_trendline(pivot_lows.index.values[-2:], pivot_lows['pivot_low'].values[-2:], 'support')

# ‚úÖ 4Ô∏è‚É£ Detect Breakouts
last_close = df['close'].iloc[-1]
breakout = None

for tl in trendlines:
    trend_type = tl['type']
    if trend_type == 'resistance' and last_close > tl['y'][-1]:  
        breakout = "Bullish Breakout! üìà"
    elif trend_type == 'support' and last_close < tl['y'][-1]:  
        breakout = "Bearish Breakout! üìâ"

# ‚úÖ 5Ô∏è‚É£ Plot Trendlines & Breakouts
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['close'], label='Close Price', color='black', linewidth=1)
plt.scatter(df['timestamp'], df['pivot_high'], color='red', label='Pivot Highs', marker='^')
plt.scatter(df['timestamp'], df['pivot_low'], color='green', label='Pivot Lows', marker='v')

for tl in trendlines:
    plt.plot(df['timestamp'].iloc[tl['x']], tl['y'], '--', label=f'{tl["type"].capitalize()} Line')

plt.title(f'Trendline Breakout Detection - {symbol}')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.xticks(rotation=45)
plt.grid()

# ‚úÖ 6Ô∏è‚É£ Save Chart
plot_path = "/home/ubuntu/trendline_breakout.png"
plt.savefig(plot_path)
plt.close()

# ‚úÖ 7Ô∏è‚É£ Send Image & Breakout Alerts to Telegram
TOKEN = "7619077339:AAGvLzsABJRFKsv50TgI1XxMNhVvtED-E_4"
CHAT_ID = "1385370555"

message = "üîî Trendline Analysis\n"
if breakout:
    message += breakout

url = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
files = {"photo": open(plot_path, "rb")}
data = {"chat_id": CHAT_ID, "caption": message}

requests.post(url, files=files, data=data)