import requests
import ccxt
import pandas as pd
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '5m'  # 4-hour candlesticks
fib_interval = '1d'  # 1-day candlesticks for Fibonacci levels

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    # Rename columns to match mplfinance format
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to calculate Fibonacci levels
def calculate_fibonacci_levels(df):
    high_price = df['High'].max()
    low_price = df['Low'].min()

    diff = high_price - low_price
    levels = {
        '0.0%': high_price,
        '23.6%': high_price - 0.236 * diff,
        '38.2%': high_price - 0.382 * diff,
        '50.0%': high_price - 0.5 * diff,
        '61.8%': high_price - 0.618 * diff,
        '100.0%': low_price
    }
    return {key: f"{value:.5f}" for key, value in levels.items()}

# Function to check EMA cross with Fibonacci levels
def check_ema_fib_cross(df, fib_levels):
    ema_short = calculate_ema(df, 3)
    df['ema_short'] = ema_short

    cross_over = any(
        df['ema_short'].iloc[-2] > float(fib_level) and df['ema_short'].iloc[-3] < float(fib_level)
        for fib_level in fib_levels.values()
    )
    cross_under = any(
        df['ema_short'].iloc[-2] < float(fib_level) and df['ema_short'].iloc[-3] > float(fib_level)
        for fib_level in fib_levels.values()
    )

    return cross_over, cross_under

# Function to send Telegram message
async def send_telegram_message(symbol, message, fib_levels):
    formatted_levels = "\n".join([f"{key}: {value}" for key, value in fib_levels.items()])
    full_message = f"{message}\nFibonacci Levels:\n{formatted_levels}"

    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=full_message)
        last_alert_messages[symbol] = message

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Binance",
            "tv_instrument": symbol.replace('/', ''),
            "action": action,
            "bot_uuid": config.BOT_UUID_1,
        },
        {
            "secret": config.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Binance",
            "tv_instrument": symbol.replace('/', ''),
            "action": action,
            "bot_uuid": config.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        print(f"Sending payload: {symbol}")
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                # Fetch historical data
                historical_data = get_historical_data(symbol, interval)
                fib_data = get_historical_data(symbol, fib_interval, limit=50)

                # Calculate Fibonacci levels
                fib_levels = calculate_fibonacci_levels(fib_data)

                # Check EMA cross with Fibonacci levels
                ema_cross_over, ema_cross_under = check_ema_fib_cross(historical_data, fib_levels)

                # EMA cross events
                if ema_cross_over:
                    message = f'/enter_long {symbol}'
                    await send_telegram_message(symbol, message, fib_levels)
                    await send_3commas_payload(symbol, 'exit_short', historical_data['Close'].iloc[-1], int(historical_data.index[-1].timestamp()))
                elif ema_cross_under:
                    message = f'/enter_short {symbol}'
                    await send_telegram_message(symbol, message, fib_levels)
                    await send_3commas_payload(symbol, 'exit_long', historical_data['Close'].iloc[-1], int(historical_data.index[-1].timestamp()))

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(300)  # Sleep duration as needed

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
