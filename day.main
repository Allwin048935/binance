import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import requests
import config
from datetime import datetime, timezone

interval = '5m'  # 5-minute candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=20):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to get day open price
def get_day_open_price(symbol):
    day_ohlcv = binance.fetch_ohlcv(symbol, '1d', limit=5)
    df_day = pd.DataFrame(day_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df_day['timestamp'] = pd.to_datetime(df_day['timestamp'], unit='ms')
    df_day.set_index('timestamp', inplace=True)
    day_open_price = df_day['close'].iloc[-2]
    return day_open_price

# Function to calculate SMA
def calculate_sma(df, period):
    return df['close'].rolling(window=period).mean()

# Function to check SMA crossover against day open price
def check_sma_crossover_vs_day_open(df, day_open_price, short_period=3):
    df['sma_short'] = calculate_sma(df, short_period)
    cross_over = df['sma_short'].iloc[-2] > day_open_price
    cross_under = df['sma_short'].iloc[-2] < day_open_price
    return cross_over, cross_under

# Function to get previous day's amplitude ratio
def get_previous_day_amplitude(symbol):
    daily_ohlcv = binance.fetch_ohlcv(symbol, '1d', limit=5)
    df_daily = pd.DataFrame(daily_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df_daily['timestamp'] = pd.to_datetime(df_daily['timestamp'], unit='ms')
    df_daily.set_index('timestamp', inplace=True)
    
    prev_day_high = df_daily['high'].iloc[-2]
    prev_day_low = df_daily['low'].iloc[-2]
    
    amplitude_ratio = prev_day_high / prev_day_low
    return amplitude_ratio

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bitget",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": config.BOT_UUID_1,
        },
        {
            "secret": config.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bitget",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": config.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        print(f"Sending payload: {symbol}")
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Main function (now defined as async)
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                day_open_price = get_day_open_price(symbol)
                cross_over, cross_under = check_sma_crossover_vs_day_open(historical_data, day_open_price)

                close_price = historical_data['close'].iloc[-1]
                amplitude_ratio = get_previous_day_amplitude(symbol)

                if amplitude_ratio >= 1.01:
                    timestamp = datetime.now(timezone.utc).isoformat()
                    if cross_over:
                        await send_3commas_payload(symbol, "enter_long", close_price, timestamp)
                    elif cross_under:
                        await send_3commas_payload(symbol, "enter_short", close_price, timestamp)
                else:
                    print(f"Amplitude condition not met for {symbol}, skipping...")

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(300)  # Sleep for 5 minutes (in seconds)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
