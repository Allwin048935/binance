import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config
import ta

interval_4h = '4h'
interval_1d = '1d'

url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

last_alert_messages = {}

def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()

def check_ema_cross(df, short_period=3, long_period=7):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    cross_over = df['ema_short'].iloc[-2] > df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] <= df['ema_long'].iloc[-3]
    cross_under = df['ema_short'].iloc[-2] < df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] >= df['ema_long'].iloc[-3]

    return cross_over, cross_under

def calculate_fibonacci_levels(df):
    high_price = df['High'].max()
    low_price = df['Low'].min()

    levels = {
        '0%': high_price,
        '23.6%': low_price + (high_price - low_price) * 0.236,
        '38.2%': low_price + (high_price - low_price) * 0.382,
        '50%': low_price + (high_price - low_price) * 0.5,
        '61.8%': low_price + (high_price - low_price) * 0.618,
        '76.4%': low_price + (high_price - low_price) * 0.764,
        '100%': low_price
    }
    return levels

def plot_candles(df_4h, df_1d, symbol, title):
    mpf_data = df_4h[['Open', 'High', 'Low', 'Close']].copy()

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    short_ema = calculate_ema(df_4h, 3)
    long_ema = calculate_ema(df_4h, 7)
    calculate_macd(df_4h)

    macd_colors = [
        'green' if df_4h['histogram'].iloc[i] > df_4h['histogram'].iloc[i - 1] else 'red'
        for i in range(1, len(df_4h['histogram']))
    ]
    macd_colors.insert(0, 'gray')

    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
            mpf.make_addplot(df_4h['histogram'], type='bar', color=macd_colors, panel=1, ylabel="MACD Histogram")
        ],
        returnfig=True
    )

    ax_candles = axlist[0]
    levels = calculate_fibonacci_levels(df_1d)

    ylim_lower = min(df_4h['Low'].min(), min(levels.values()))
    ylim_upper = max(df_4h['High'].max(), max(levels.values()))
    ax_candles.set_ylim(ylim_lower, ylim_upper)

    for level, value in levels.items():
        ax_candles.axhline(y=value, color='white', linestyle='-', linewidth=1.5)
        ax_candles.text(df_4h.index[-1], value, f'{level} ({value:.2f})',
                        verticalalignment='center', horizontalalignment='left',
                        color='white', fontsize=10, bbox=dict(facecolor='black', alpha=0.5))

    ax_candles.set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    return buf

async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data_4h = get_historical_data(symbol, interval_4h)
                historical_data_1d = get_historical_data(symbol, interval_1d)

                calculate_macd(historical_data_4h)
                ema_cross_over, ema_cross_under = check_ema_cross(historical_data_4h)

                if ema_cross_over:
                    message = f'/enter_long {symbol}'
                    title = f'EMA Cross Over for {symbol}'
                    image_buffer = plot_candles(historical_data_4h, historical_data_1d, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif ema_cross_under:
                    message = f'/enter_short {symbol}'
                    title = f'EMA Cross Under for {symbol}'
                    image_buffer = plot_candles(historical_data_4h, historical_data_1d, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(900)

telegram_bot = Bot(token=config.TELEGRAM_TOKEN)
nest_asyncio.apply()
asyncio.run(main())
