import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '5m'  # 5-minute candlesticks

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

def get_historical_data(symbol, interval, limit=1000):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

def convert_to_renko(df, brick_size_percent=1):
    if len(df) < 3:
        return pd.DataFrame()
    
    ref_close = df['Close'].iloc[-2]
    brick_size = ref_close * (brick_size_percent / 100)
    renko_data = []
    last_brick_close = ref_close
    
    for i in range(1, len(df)):
        close = df['Close'].iloc[i]
        diff = close - last_brick_close
        
        if abs(diff) >= brick_size:
            num_bricks = int(abs(diff) // brick_size)
            direction = 1 if diff > 0 else -1
            
            for _ in range(num_bricks):
                new_brick_close = last_brick_close + (direction * brick_size)
                renko_data.append({
                    'Open': last_brick_close,
                    'High': max(last_brick_close, new_brick_close),
                    'Low': min(last_brick_close, new_brick_close),
                    'Close': new_brick_close
                })
                last_brick_close = new_brick_close

    renko_df = pd.DataFrame(renko_data)
    if not renko_df.empty:
        renko_df.index = pd.date_range(start=df.index[0], periods=len(renko_df), freq='min')
    return renko_df

def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Histogram'] = macd.macd_diff()
    return df

def plot_renko(df, symbol, title, brick_size_percent):
    renko_df = convert_to_renko(df, brick_size_percent)
    if renko_df.empty:
        return None
    
    renko_df = calculate_macd(renko_df)
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style='dark_background', marketcolors=mc, y_on_right=True)
    
    fig, axes = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(10, 6))
    
    mpf.plot(
        renko_df, type='candle', style=s, ax=axes[0], tight_layout=True
    )
    axes[0].set_title(f"{symbol} - {title}", fontsize=15)
    
    axes[1].bar(renko_df.index, renko_df['MACD_Histogram'], color=[
        'green' if v >= 0 else 'red' for v in renko_df['MACD_Histogram']
    ], alpha=0.6)
    axes[1].set_title("MACD Histogram")
    
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        if image_buffer:
            await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                renko_df = convert_to_renko(historical_data, brick_size_percent=2)
                if renko_df.empty:
                    continue

                renko_df['ema_short'] = ta.trend.EMAIndicator(renko_df['Close'], window=3).ema_indicator()
                renko_df['ema_long'] = ta.trend.EMAIndicator(renko_df['Close'], window=7).ema_indicator()

                cross_over = renko_df['ema_short'].iloc[-2] > renko_df['ema_long'].iloc[-2] and renko_df['ema_short'].iloc[-3] <= renko_df['ema_long'].iloc[-3]
                cross_under = renko_df['ema_short'].iloc[-2] < renko_df['ema_long'].iloc[-2] and renko_df['ema_short'].iloc[-3] >= renko_df['ema_long'].iloc[-3]

                if cross_over:
                    message = f'Crossover #{symbol}'
                    image_buffer = plot_renko(historical_data, symbol, "Short EMA Cross Over Long EMA", brick_size_percent=2)
                    await send_telegram_message(symbol, message, image_buffer)
                elif cross_under:
                    message = f'Crossdown #{symbol}'
                    image_buffer = plot_renko(historical_data, symbol, "Short EMA Cross Down Long EMA", brick_size_percent=2)
                    await send_telegram_message(symbol, message, image_buffer)
            except Exception as e:
                print(f"Error processing {symbol}: {e}")
        await asyncio.sleep(300)

telegram_bot = Bot(token=config.TELEGRAM_TOKEN)
nest_asyncio.apply()
asyncio.run(main())
