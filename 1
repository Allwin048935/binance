import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
import asyncio
import csv
import json
import os
from io import BytesIO
from telegram import Bot
import config1
import ta
from datetime import datetime, timezone

# Constants
INTERVAL = '3m'
RENKO_CSV_FILE = "renko_bricks.csv"
ALERT_HISTORY_FILE = "alert_history.json"

# Fetch selected symbols dynamically from Binance
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching symbols: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Load Renko history from CSV
def load_renko_history():
    """Loads saved Renko bricks from CSV."""
    if not os.path.exists(RENKO_CSV_FILE):
        return {}
    renko_history = {}
    df = pd.read_csv(RENKO_CSV_FILE)
    for symbol in df['Symbol'].unique():
        renko_history[symbol] = df[df['Symbol'] == symbol][['Open', 'High', 'Low', 'Close']]
    return renko_history

# Calculate EMA from stored Renko close prices
def calculate_ema(renko_df, period):
    if len(renko_df) < period:
        return pd.Series([None] * len(renko_df), index=renko_df.index)
    return ta.trend.EMAIndicator(renko_df['Close'], window=period).ema_indicator()

# Plot Renko Chart
def plot_renko_chart(symbol):
    renko_history = load_renko_history()
    if symbol not in renko_history:
        return None, None
    renko_df = renko_history[symbol]
    renko_df['ema_short'] = calculate_ema(renko_df, 2)
    renko_df['ema_long'] = calculate_ema(renko_df, 26)
    renko_plot_df = renko_df.iloc[-120:]  # Last 120 Renko bricks for plotting

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
    
    fig, ax = mpf.plot(
        renko_plot_df, figratio=(10, 6), type="candle", style=s, tight_layout=True,
        datetime_format='%H:%M', ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(renko_plot_df['ema_short'], color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(renko_plot_df['ema_long'], color='magenta', width=1.5, linestyle='-'),
        ], returnfig=True
    )
    
    ax[0].set_title(f"{symbol} - Renko Chart", fontsize=18)
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    
    return buf, renko_plot_df['Close'].iloc[-1]

# Main Trading Loop
async def main(tg_bot):
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                image_buffer, close_price = plot_renko_chart(symbol)
                if image_buffer:
                    await tg_bot.send_photo(chat_id=config1.CHAT_ID, photo=image_buffer, caption=f"#{symbol} - Renko Chart")
            except Exception as e:
                print(f"Error processing {symbol}: {e}")
        await asyncio.sleep(30)

if __name__ == "__main__":
    tg_bot = Bot(token=config1.TELEGRAM_TOKEN)
    asyncio.run(main(tg_bot))
