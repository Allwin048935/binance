import requests
import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import config1  # Import the config module
import ta  # Import the ta library
import json
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
from datetime import datetime
from telegram import Bot

interval = '3m'  # Original candlestick interval

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Dictionary to track the last alert message sent for each symbol
last_alert_messages = {}

# Load previous Renko close prices from a JSON file
renko_history_file = "renko_history.json"
try:
    with open(renko_history_file, "r") as f:
        renko_history = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    renko_history = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=1500):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to create and update Renko data
def update_renko_data(df, symbol, percentage=3):
    brick_size = percentage / 100  
    last_renko_close = renko_history.get(symbol, None)
    renko_data = []

    for index, row in df.iterrows():
        close = row['Close']
        if last_renko_close is None:
            renko_data.append({'timestamp': index, 'Close': close})
            last_renko_close = close
        else:
            while abs(close - last_renko_close) / last_renko_close >= brick_size:
                direction = 1 if close > last_renko_close else -1
                last_renko_close += direction * last_renko_close * brick_size
                renko_data.append({'timestamp': index, 'Close': last_renko_close})

    if renko_data:
        renko_history[symbol] = renko_data[-1]['Close']

    renko_df = pd.DataFrame(renko_data)
    renko_df.set_index('timestamp', inplace=True)
    return renko_df

# Function to calculate EMA
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to plot Renko chart with EMA
def plot_renko_chart(renko_df, symbol):
    renko_df['ema_short'] = calculate_ema(renko_df, 4)
    renko_df['ema_long'] = calculate_ema(renko_df, 14)

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    fig, _ = mpf.plot(
        renko_df, figratio=(10, 6), type="candle", style=s, tight_layout=True,
        datetime_format='%H:%M', ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(renko_df['ema_short'], color='cyan', width=1.5),
            mpf.make_addplot(renko_df['ema_long'], color='magenta', width=1.5)
        ], returnfig=True
    )

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    
    return buf

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price):
    timestamp = int(datetime.now().timestamp())
    payloads = [
        {
            "secret": config1.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bitget",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_1,
        },
        {
            "secret": config1.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bitget",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Function to send Telegram message with image
async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config1.CHAT_ID, text=message)
        await telegram_bot.send_photo(chat_id=config1.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                renko_df = update_renko_data(historical_data, symbol, percentage=0.5)
                if renko_df.empty:
                    continue 
                
                message = f'Renko Update #{symbol}'
                image_buffer = plot_renko_chart(renko_df, symbol)
                await send_telegram_message(symbol, message, image_buffer)
                await send_3commas_payload(symbol, "update", renko_df['Close'].iloc[-1])
            
            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(180)

telegram_bot = Bot(token=config1.TELEGRAM_TOKEN)
nest_asyncio.apply()
asyncio.run(main())
