import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import config  # Import the config module
import ta  # Import ta library

interval = '2h'  # 4-hour candlestick
fib_interval = '1d'  # 1-day candlestick for Fibonacci levels

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    # Rename columns to match mplfinance format
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate MACD using ta library
def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()

# Function to check histogram cross (replacing EMA cross)
def check_histogram_cross(df):
    calculate_macd(df)  # Ensure MACD and histogram are calculated

    # Check if histogram value is greater than previous (crossover)
    cross_over = df['histogram'].iloc[-2] > df['histogram'].iloc[-3] and df['histogram'].iloc[-2] > 0
    # Check if histogram value is lower than previous (crossunder)
    cross_under = df['histogram'].iloc[-2] < df['histogram'].iloc[-3] and df['histogram'].iloc[-2] < 0

    return cross_over, cross_under

# Function to calculate Fibonacci levels
def calculate_fibonacci_levels(df):
    high_price = df['High'].max()
    low_price = df['Low'].min()

    diff = high_price - low_price
    levels = {
        '0.0%': high_price,
        '23.6%': high_price - 0.236 * diff,
        '38.2%': high_price - 0.382 * diff,
        '50.0%': high_price - 0.5 * diff,
        '61.8%': high_price - 0.618 * diff,
        '100.0%': low_price
    }
    return levels

# Updated function to plot candlesticks with MACD Histogram and Fibonacci levels
def plot_candles(df, fib_df, symbol, title):
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()

    # Create custom market colors for up and down candlesticks
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)

    # Create a custom style using the market colors and other style settings
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    # Calculate MACD values for plotting
    calculate_macd(df)

    # Set dynamic colors for the MACD histogram based on the comparison with the previous value
    macd_colors = [
        'green' if df['histogram'].iloc[i] > df['histogram'].iloc[i - 1] else 'red'
        for i in range(1, len(df['histogram']))
    ]
    macd_colors.insert(0, 'gray')  # Add a neutral color for the first bar

    # Calculate Fibonacci levels
    fib_levels = calculate_fibonacci_levels(fib_df)

    # Plot figure with custom ratio and return it for further customization
    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(df['histogram'], type='bar', color=macd_colors, panel=1, ylabel="MACD Histogram")
        ],
        returnfig=True
    )

    ax = axlist[0]

    # Annotate Fibonacci levels
    for level, price in fib_levels.items():
        ax.axhline(price, color='yellow', linestyle='-', linewidth=2)
        ax.annotate(f'{level}: {price:.2f}', xy=(1, price), xytext=(5, 0), textcoords='offset points',
                    ha='left', va='center', color='black', fontsize=8, backgroundcolor='white')

    # Adjust the y-axis limits to ensure at least two Fibonacci levels are visible
    ylim = [min(fib_levels.values()) - (0.05 * (max(fib_levels.values()) - min(fib_levels.values()))),
            max(fib_levels.values()) + (0.05 * (max(fib_levels.values()) - min(fib_levels.values())))]
    ax.set_ylim(ylim)

    # Add Title
    ax.set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')

    # Save plot to a BytesIO object
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)

    # Close the figure to avoid memory overflow
    plt.close(fig)

    return buf

# Function to send Telegram message and image with inline buttons
async def send_telegram_message(symbol, message, image_buffer, close_price):
    if last_alert_messages.get(symbol) != message:
        # Create inline keyboard with two buttons
        keyboard = [
            [InlineKeyboardButton("Enter Long", callback_data=f"long_{symbol}_{close_price}")],
            [InlineKeyboardButton("Enter Short", callback_data=f"short_{symbol}_{close_price}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send message with buttons
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message, reply_markup=reply_markup)
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)

        last_alert_messages[symbol] = message

# Function to handle Telegram callback queries (button clicks)
async def handle_telegram_callback(update):
    query = update.callback_query
    data = query.data.split('_')
    action, symbol, close_price = data[0], data[1], float(data[2])

    # Send payload to 3Commas
    timestamp = pd.Timestamp.now().isoformat()
    await send_3commas_payload(symbol, action, close_price, timestamp)

    # Acknowledge the callback query
    await query.answer(f"Order {action} executed for {symbol} at {close_price}")

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": "long" if action == "long" else "short",
            "bot_uuid": config.BOT_UUID_1,
        },
        {
            "secret": config.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": "long" if action == "long" else "short",
            "bot_uuid": config.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Main function with Telegram polling
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                # Fetch historical data
                historical_data = get_historical_data(symbol, interval)
                fib_data = get_historical_data(symbol, fib_interval, limit=50)

                # Check histogram crossovers
                histogram_cross_over, histogram_cross_under = check_histogram_cross(historical_data)

                # Histogram cross events
                if histogram_cross_over:
                    message = f"Histogram Cross Over detected for {symbol}! Current price: {historical_data['Close'].iloc[-1]}"
                    title = f'Histogram Cross Over for {symbol}'
                    image_buffer = plot_candles(historical_data, fib_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer, historical_data['Close'].iloc[-1])
                elif histogram_cross_under:
                    message = f"Histogram Cross Under detected for {symbol}! Current price: {historical_data['Close'].iloc[-1]}"
                    title = f'Histogram Cross Under for {symbol}'
                    image_buffer = plot_candles(historical_data, fib_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer, historical_data['Close'].iloc[-1])

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(900)  # Sleep duration as needed

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Set up Telegram update handler
async def on_shutdown():
    await telegram_bot.close()

from telegram.ext import Application, MessageHandler, Filters, CallbackQueryHandler

application = Application.builder().token(config.TELEGRAM_TOKEN).build()

# Add handlers
application.add_handler(CallbackQueryHandler(handle_telegram_callback))

# Start the bot
application.run_polling(allowed_updates=Update.ALL_TYPES)

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Run the main loop
asyncio.run(main())