import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '1d'  # Adjust to '4h' if you need 4-hour candlesticks

# Fetch SELECTED_SYMBOLS dynamically from Binance
url = "https://api.binance.com/api/v3/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    # Rename columns to match mplfinance format
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to calculate MACD using ta library
def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()

# Function to calculate KDJ indicator
def calculate_kdj(df, period=14):
    high = df['High'].rolling(window=period).max()
    low = df['Low'].rolling(window=period).min()
    close = df['Close']
    rsv = ((close - low) / (high - low)) * 100
    df['K'] = rsv.ewm(alpha=1/3, adjust=False).mean()
    df['D'] = df['K'].ewm(alpha=1/3, adjust=False).mean()
    df['J'] = 3 * df['K'] - 2 * df['D']

# Function to check MACD histogram conditions
def check_macd_histogram(df):
    long_condition = df['histogram'].iloc[-2] > df['histogram'].iloc[-3] and df['histogram'].iloc[-3] > df['histogram'].iloc[-4] and df['histogram'].iloc[-4] < df['histogram'].iloc[-5]
    short_condition = df['histogram'].iloc[-2] < df['histogram'].iloc[-3] and df['histogram'].iloc[-3] < df['histogram'].iloc[-4] and df['histogram'].iloc[-4] > df['histogram'].iloc[-5]
    return long_condition, short_condition

# Function to plot candlesticks with EMA lines, MACD Histogram, and KDJ indicator
def plot_candles(df, symbol, title):
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()

    # Create custom market colors for up and down candlesticks
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)

    # Create a custom style using the market colors and other style settings
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    # Add EMA lines, MACD Histogram, and KDJ Indicator to the plot
    short_ema = calculate_ema(df, 3)
    long_ema = calculate_ema(df, 7)
    calculate_macd(df)  # Calculate MACD values for plotting
    calculate_kdj(df)  # Calculate KDJ values for plotting

    # Set dynamic colors for the MACD histogram
    macd_colors = [
        'green' if df['histogram'].iloc[i] > df['histogram'].iloc[i - 1] else 'red'
        for i in range(1, len(df['histogram']))
    ]
    macd_colors.insert(0, 'gray')  # Add a neutral color for the first bar

    # Plot figure
    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 8),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
            mpf.make_addplot(df['histogram'], type='bar', color=macd_colors, panel=1, ylabel="MACD Histogram"),
            mpf.make_addplot(df['K'], panel=2, color='blue', width=1.5, linestyle='-', ylabel="KDJ"),
            mpf.make_addplot(df['D'], panel=2, color='orange', width=1.5, linestyle='-'),
            mpf.make_addplot(df['J'], panel=2, color='purple', width=1.5, linestyle='-')
        ],
        returnfig=True
    )

    # Add Title
    axlist[0].set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')

    # Save plot to a BytesIO object
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

# Function to send Telegram message and image
async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                calculate_macd(historical_data)
                calculate_kdj(historical_data)

                # Check MACD histogram conditions
                macd_long, macd_short = check_macd_histogram(historical_data)

                if macd_long:
                    message = f'/set_symbols #Long {symbol}'
                    title = f'MACD Histogram Long for {symbol}'
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif macd_short:
                    message = f'/set_symbols #Short {symbol}'
                    title = f'MACD Histogram Short for {symbol}'
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
            except Exception as e:
                print(f"Error processing {symbol}: {e}")
        await asyncio.sleep(1800)

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
