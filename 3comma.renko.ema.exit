import requests
import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import config1  # Import the config module
import ta  # Import the ta library
import json  # For saving Renko history

interval = '5m'  # Original candlestick interval

# Fetch SELECTED_SYMBOLS dynamically from Binance Futures
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()  # Check if the request was successful
    data = response.json()

    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching data from Binance Futures: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Dictionary to track the last alert message sent for each symbol
last_alert_messages = {}

# Load previous Renko close prices from a JSON file
renko_history_file = "renko_history.json"
try:
    with open(renko_history_file, "r") as f:
        renko_history = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    renko_history = {}  # Initialize empty if file not found or corrupted

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=1500):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to create and update Renko data with fixed percentage brick size
def update_renko_data(df, symbol, percentage=1):
    brick_size = percentage / 100
    last_renko_close = renko_history.get(symbol, None)
    renko_data = []

    for index, row in df.iterrows():
        close = row['Close']
        if last_renko_close is None:
            renko_data.append({'timestamp': index, 'Close': close})
            last_renko_close = close
        else:
            while abs(close - last_renko_close) / last_renko_close >= brick_size:
                direction = 1 if close > last_renko_close else -1
                last_renko_close += direction * last_renko_close * brick_size
                renko_data.append({'timestamp': index, 'Close': last_renko_close})

    if len(renko_data) > 1:
        renko_history[symbol] = renko_data[-2]['Close']

    renko_df = pd.DataFrame(renko_data)
    renko_df.set_index('timestamp', inplace=True)
    return renko_df

# Function to calculate EMA using Renko close prices
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to check EMA cross using Renko data
def check_ema_cross(df, short_period=2, long_period=9):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)
    cross_over = df['ema_short'].iloc[-2] > df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] <= df['ema_long'].iloc[-3]
    cross_under = df['ema_short'].iloc[-2] < df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] >= df['ema_long'].iloc[-3]
    return cross_over, cross_under

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config1.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_1,
        },
        {
            "secret": config1.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

# Main function
async def main():
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                renko_data = update_renko_data(historical_data, symbol, percentage=1)
                if len(renko_data) < 3:
                    print(f"Skipping {symbol}, not enough Renko data.")
                    continue
                ema_cross_over, ema_cross_under = check_ema_cross(renko_data)
                close_price = renko_data['Close'].iloc[-1]
                timestamp = int(renko_data.index[-1].timestamp())
                
                action = 'exit_short' if ema_cross_over else 'exit_long' if ema_cross_under else None
                if action:
                    last_message = last_alert_messages.get(symbol)
                    current_message = f"{symbol}:{action}"
                    if last_message != current_message:
                        await send_3commas_payload(symbol, action, close_price, timestamp)
                        last_alert_messages[symbol] = current_message
            except Exception as e:
                print(f"Error processing {symbol}: {e}")
        with open(renko_history_file, "w") as f:
            json.dump(renko_history, f)
        await asyncio.sleep(300)

nest_asyncio.apply()
asyncio.run(main())
