import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
import asyncio
import csv
import json
import os
from io import BytesIO
from telegram import Bot
import config1
import ta
from datetime import datetime, timezone

INTERVAL = '15m'
RENKO_CSV_FILE = "renko_bricks.csv"
ALERT_HISTORY_FILE = "alert_history.json"

# Fetch selected symbols dynamically from Binance
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching symbols: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config1.API_KEY,
    'secret': config1.API_SECRET,
})

# Load alert history
try:
    with open(ALERT_HISTORY_FILE, "r") as file:
        last_alert_messages = json.load(file)
except (FileNotFoundError, json.JSONDecodeError):
    last_alert_messages = {}

def save_alert_history():
    with open(ALERT_HISTORY_FILE, "w") as file:
        json.dump(last_alert_messages, file, indent=4)

def get_historical_data(symbol, interval, limit=1000):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

def load_renko_history():
    if not os.path.exists(RENKO_CSV_FILE):
        return {}
    
    renko_history = {}
    with open(RENKO_CSV_FILE, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            symbol = row['Symbol']
            if symbol not in renko_history:
                renko_history[symbol] = []
            renko_history[symbol].append({
                'Open': float(row['Open']),
                'High': float(row['High']),
                'Low': float(row['Low']),
                'Close': float(row['Close'])
            })
    return renko_history

def save_renko_history(renko_history):
    with open(RENKO_CSV_FILE, mode='w', newline='') as file:
        fieldnames = ['Symbol', 'Open', 'High', 'Low', 'Close']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for symbol, bricks in renko_history.items():
            for brick in bricks:
                writer.writerow({'Symbol': symbol, **brick})

def convert_to_renko(symbol, df, brick_size_percent=0.5):
    if len(df) < 3:
        return pd.DataFrame()
    
    renko_history = load_renko_history()
    ref_close = df['Close'].iloc[-1]
    brick_size = ref_close * (brick_size_percent / 100)

    # Get last confirmed Renko brick
    last_brick_close = renko_history.get(symbol, [{'Close': ref_close}])[-1]['Close']
    
    new_renko_data = renko_history.get(symbol, []).copy()
    
    for i in range(1, len(df)):
        close = df['Close'].iloc[i]
        diff = close - last_brick_close
        
        if abs(diff) >= brick_size:
            num_bricks = int(abs(diff) // brick_size)
            direction = 1 if diff > 0 else -1
            
            for _ in range(num_bricks):
                new_brick_close = last_brick_close + (direction * brick_size)
                if len(new_renko_data) == 0 or new_renko_data[-1]['Close'] != new_brick_close:
                    new_renko_data.append({
                        'Open': last_brick_close,
                        'High': max(last_brick_close, new_brick_close),
                        'Low': min(last_brick_close, new_brick_close),
                        'Close': new_brick_close
                    })
                last_brick_close = new_brick_close
    
    renko_history[symbol] = new_renko_data[-5000:]  # Keep only the last 5000 bricks
    save_renko_history(renko_history)
    
    renko_df = pd.DataFrame(new_renko_data)
    if not renko_df.empty:
        renko_df.index = pd.date_range(start=df.index[0], periods=len(renko_df), freq='min')
    
    return renko_df

def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

def detect_ema_crossover(renko_df):
    if len(renko_df) < 3:
        return None

    ema_short_prev, ema_long_prev = renko_df['ema_short'].iloc[-2], renko_df['ema_long'].iloc[-2]
    ema_short_curr, ema_long_curr = renko_df['ema_short'].iloc[-1], renko_df['ema_long'].iloc[-1]

    if ema_short_curr > ema_long_curr:
        return "Bullish Crossover"
    elif ema_short_curr < ema_long_curr:
        return "Bearish Crossunder"
    return None

# Function to send payload to 3Commas
async def send_3commas_payload(symbol, action, close_price, timestamp):
    payloads = [
        {
            "secret": config1.SECRET_1,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_1,
        },
        {
            "secret": config1.SECRET_2,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bitget",
            "tv_instrument": symbol + '.P',
            "action": action,
            "bot_uuid": config1.BOT_UUID_2,
        }
    ]

    for payload in payloads:
        try:
            response = requests.post('https://api.3commas.io/signal_bots/webhooks', json=payload)
            response.raise_for_status()
            print(f"Payload sent for {symbol} with action {action}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending payload for {symbol}: {e}")

def plot_renko_chart(df, symbol):
    renko_df = convert_to_renko(symbol, df)
    if renko_df.empty or len(renko_df) < 3:
        return None, None, None
    
    renko_df = renko_df[-120:]
    
    renko_df['ema_short'] = calculate_ema(renko_df, 2)
    renko_df['ema_long'] = calculate_ema(renko_df, 26)
    
    crossover_signal = detect_ema_crossover(renko_df)
    if not crossover_signal:
        return None, None, None

    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    fig, ax = mpf.plot(
        renko_df, figratio=(10, 6), type="candle", style=s, tight_layout=True,
        datetime_format='%H:%M', ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(renko_df['ema_short'], color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(renko_df['ema_long'], color='magenta', width=1.5, linestyle='-'),
        ], returnfig=True
    )
    
    ax[0].set_title(f"{symbol} - Renko Chart", fontsize=18)
    
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    close_price = renko_df['Close'].iloc[-1]
    return buf, crossover_signal, close_price

async def main(tg_bot):
    while True:
        for symbol in SELECTED_SYMBOLS:
            try:
                df = get_historical_data(symbol, INTERVAL)
                image_buffer, crossover_signal, close_price = plot_renko_chart(df, symbol)

                if image_buffer and crossover_signal:
                    current_alert_message = f"#{symbol}: {crossover_signal}"
                    last_alert_message = last_alert_messages.get(symbol, "")

                    if current_alert_message != last_alert_message:
                        await tg_bot.send_photo(chat_id=config1.CHAT_ID, photo=image_buffer, caption=current_alert_message)
                        
                        # Send 3Commas payload based on the crossover signal
                        timestamp = int(datetime.now(timezone.utc).timestamp())
                        action = "enter_long" if crossover_signal == "Bullish Crossover" else "enter_short"
                        await send_3commas_payload(symbol, action, close_price, timestamp)

                        # Update the last alert message
                        last_alert_messages[symbol] = current_alert_message
                        save_alert_history()

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(15)

if __name__ == "__main__":
    tg_bot = Bot(token=config1.TELEGRAM_TOKEN)
    asyncio.run(main(tg_bot))
